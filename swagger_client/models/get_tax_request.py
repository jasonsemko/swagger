# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTaxRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, business_identification_no=None, commit=None, client=None, company_code=None, customer_code=None, currency_code=None, customer_usage_type=None, detail_level=None, discount=None, doc_code=None, doc_type=None, doc_date=None, exemption_no=None, location_code=None, pos_lane_code=None, purchase_order_no=None, reference_code=None, tax_override=None, addresses=None, lines=None):
        """
        GetTaxRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'business_identification_no': 'str',
            'commit': 'bool',
            'client': 'str',
            'company_code': 'str',
            'customer_code': 'str',
            'currency_code': 'str',
            'customer_usage_type': 'str',
            'detail_level': 'str',
            'discount': 'float',
            'doc_code': 'str',
            'doc_type': 'str',
            'doc_date': 'date',
            'exemption_no': 'str',
            'location_code': 'str',
            'pos_lane_code': 'str',
            'purchase_order_no': 'str',
            'reference_code': 'str',
            'tax_override': 'TaxOverride',
            'addresses': 'list[Address]',
            'lines': 'list[Line]'
        }

        self.attribute_map = {
            'business_identification_no': 'BusinessIdentificationNo',
            'commit': 'Commit',
            'client': 'Client',
            'company_code': 'CompanyCode',
            'customer_code': 'CustomerCode',
            'currency_code': 'CurrencyCode',
            'customer_usage_type': 'CustomerUsageType',
            'detail_level': 'DetailLevel',
            'discount': 'Discount',
            'doc_code': 'DocCode',
            'doc_type': 'DocType',
            'doc_date': 'DocDate',
            'exemption_no': 'ExemptionNo',
            'location_code': 'LocationCode',
            'pos_lane_code': 'PosLaneCode',
            'purchase_order_no': 'PurchaseOrderNo',
            'reference_code': 'ReferenceCode',
            'tax_override': 'TaxOverride',
            'addresses': 'Addresses',
            'lines': 'Lines'
        }

        self._business_identification_no = business_identification_no
        self._commit = commit
        self._client = client
        self._company_code = company_code
        self._customer_code = customer_code
        self._currency_code = currency_code
        self._customer_usage_type = customer_usage_type
        self._detail_level = detail_level
        self._discount = discount
        self._doc_code = doc_code
        self._doc_type = doc_type
        self._doc_date = doc_date
        self._exemption_no = exemption_no
        self._location_code = location_code
        self._pos_lane_code = pos_lane_code
        self._purchase_order_no = purchase_order_no
        self._reference_code = reference_code
        self._tax_override = tax_override
        self._addresses = addresses
        self._lines = lines

    @property
    def business_identification_no(self):
        """
        Gets the business_identification_no of this GetTaxRequest.
        The buyer’s VAT ID. Using this value will force VAT rules to be considered for the transaction. This may be set on the document or the line. Note that this should be a valid VAT number, and this field should not be used for any other purpose.

        :return: The business_identification_no of this GetTaxRequest.
        :rtype: str
        """
        return self._business_identification_no

    @business_identification_no.setter
    def business_identification_no(self, business_identification_no):
        """
        Sets the business_identification_no of this GetTaxRequest.
        The buyer’s VAT ID. Using this value will force VAT rules to be considered for the transaction. This may be set on the document or the line. Note that this should be a valid VAT number, and this field should not be used for any other purpose.

        :param business_identification_no: The business_identification_no of this GetTaxRequest.
        :type: str
        """
        if business_identification_no is not None and len(business_identification_no) > 25:
            raise ValueError("Invalid value for `business_identification_no`, length must be less than or equal to `25`")

        self._business_identification_no = business_identification_no

    @property
    def commit(self):
        """
        Gets the commit of this GetTaxRequest.
        Default is false. Setting this value to true will put the document in a Committed status, preventing further document status changes, except voiding with CancelTax.

        :return: The commit of this GetTaxRequest.
        :rtype: bool
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """
        Sets the commit of this GetTaxRequest.
        Default is false. Setting this value to true will put the document in a Committed status, preventing further document status changes, except voiding with CancelTax.

        :param commit: The commit of this GetTaxRequest.
        :type: bool
        """

        self._commit = commit

    @property
    def client(self):
        """
        Gets the client of this GetTaxRequest.
        An identifier of software client generating the API call.

        :return: The client of this GetTaxRequest.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """
        Sets the client of this GetTaxRequest.
        An identifier of software client generating the API call.

        :param client: The client of this GetTaxRequest.
        :type: str
        """
        if client is not None and len(client) > 50:
            raise ValueError("Invalid value for `client`, length must be less than or equal to `50`")

        self._client = client

    @property
    def company_code(self):
        """
        Gets the company_code of this GetTaxRequest.
        The case-sensitive code that identifies the company in the AvaTax account in which the document should be posted. This code is declared during the company setup in the AvaTax Admin Console. If no value is passed, the document will be assigned to the default company. If a value is passed that does not match any company on on the account, an error is returned.

        :return: The company_code of this GetTaxRequest.
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """
        Sets the company_code of this GetTaxRequest.
        The case-sensitive code that identifies the company in the AvaTax account in which the document should be posted. This code is declared during the company setup in the AvaTax Admin Console. If no value is passed, the document will be assigned to the default company. If a value is passed that does not match any company on on the account, an error is returned.

        :param company_code: The company_code of this GetTaxRequest.
        :type: str
        """
        if company_code is not None and len(company_code) > 25:
            raise ValueError("Invalid value for `company_code`, length must be less than or equal to `25`")

        self._company_code = company_code

    @property
    def customer_code(self):
        """
        Gets the customer_code of this GetTaxRequest.
        The case-sensitive client application customer reference code. This is required since it is the key to the Exemption Certificate Management Service in the Admin Console.

        :return: The customer_code of this GetTaxRequest.
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """
        Sets the customer_code of this GetTaxRequest.
        The case-sensitive client application customer reference code. This is required since it is the key to the Exemption Certificate Management Service in the Admin Console.

        :param customer_code: The customer_code of this GetTaxRequest.
        :type: str
        """
        if customer_code is None:
            raise ValueError("Invalid value for `customer_code`, must not be `None`")
        if customer_code is not None and len(customer_code) > 50:
            raise ValueError("Invalid value for `customer_code`, length must be less than or equal to `50`")

        self._customer_code = customer_code

    @property
    def currency_code(self):
        """
        Gets the currency_code of this GetTaxRequest.
        3 character ISO 4217 compliant currency code. If unspecified, a default of USD will be used.

        :return: The currency_code of this GetTaxRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this GetTaxRequest.
        3 character ISO 4217 compliant currency code. If unspecified, a default of USD will be used.

        :param currency_code: The currency_code of this GetTaxRequest.
        :type: str
        """
        if currency_code is not None and len(currency_code) > 3:
            raise ValueError("Invalid value for `currency_code`, length must be less than or equal to `3`")

        self._currency_code = currency_code

    @property
    def customer_usage_type(self):
        """
        Gets the customer_usage_type of this GetTaxRequest.
        The client application customer or usage type. More information about this value is available in the [Avalara Help Center](https://help.avalara.com/kb/001/What_are_the_Entity_Use_Codes_used_for_Avalara_AvaTax%3F).

        :return: The customer_usage_type of this GetTaxRequest.
        :rtype: str
        """
        return self._customer_usage_type

    @customer_usage_type.setter
    def customer_usage_type(self, customer_usage_type):
        """
        Sets the customer_usage_type of this GetTaxRequest.
        The client application customer or usage type. More information about this value is available in the [Avalara Help Center](https://help.avalara.com/kb/001/What_are_the_Entity_Use_Codes_used_for_Avalara_AvaTax%3F).

        :param customer_usage_type: The customer_usage_type of this GetTaxRequest.
        :type: str
        """
        if customer_usage_type is not None and len(customer_usage_type) > 25:
            raise ValueError("Invalid value for `customer_usage_type`, length must be less than or equal to `25`")

        self._customer_usage_type = customer_usage_type

    @property
    def detail_level(self):
        """
        Gets the detail_level of this GetTaxRequest.
        Specifies the level of detail to return. Summary - summarizes document and jurisdiction detail with no line breakout Document - only document detail Line - document and line detail Tax - document, line and jurisdiction detail

        :return: The detail_level of this GetTaxRequest.
        :rtype: str
        """
        return self._detail_level

    @detail_level.setter
    def detail_level(self, detail_level):
        """
        Sets the detail_level of this GetTaxRequest.
        Specifies the level of detail to return. Summary - summarizes document and jurisdiction detail with no line breakout Document - only document detail Line - document and line detail Tax - document, line and jurisdiction detail

        :param detail_level: The detail_level of this GetTaxRequest.
        :type: str
        """

        self._detail_level = detail_level

    @property
    def discount(self):
        """
        Gets the discount of this GetTaxRequest.
        The discount amount to apply to the document. This may be used along with the line attribute `Discounted` in order to distribute a set discount amount proportionally across the applicable document lines. This should be an amount, not a percent.

        :return: The discount of this GetTaxRequest.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this GetTaxRequest.
        The discount amount to apply to the document. This may be used along with the line attribute `Discounted` in order to distribute a set discount amount proportionally across the applicable document lines. This should be an amount, not a percent.

        :param discount: The discount of this GetTaxRequest.
        :type: float
        """

        self._discount = discount

    @property
    def doc_code(self):
        """
        Gets the doc_code of this GetTaxRequest.
        While this is an optional field, serious consideration should be given to using it. If no value is sent, AvaTax assigns a GUID value to keep the document unique. This can make reconciliation a challenge.

        :return: The doc_code of this GetTaxRequest.
        :rtype: str
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """
        Sets the doc_code of this GetTaxRequest.
        While this is an optional field, serious consideration should be given to using it. If no value is sent, AvaTax assigns a GUID value to keep the document unique. This can make reconciliation a challenge.

        :param doc_code: The doc_code of this GetTaxRequest.
        :type: str
        """
        if doc_code is not None and len(doc_code) > 50:
            raise ValueError("Invalid value for `doc_code`, length must be less than or equal to `50`")

        self._doc_code = doc_code

    @property
    def doc_type(self):
        """
        Gets the doc_type of this GetTaxRequest.
        The document type specifies the category of the document and affects how the document is treated after a tax calculation. If no DocType is specified in the request, SalesOrder will be used. SalesOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. SalesInvoice: The document is a permanent invoice; document and tax calculation results are saved in the tax history. GetTaxResult will return with a DocStatus of Saved. PurchaseOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. PurchaseInvoice : The document is a permanent invoice; document and tax calculation results are saved in the tax history. GetTaxResult will return with a DocStatus of Saved. ReturnOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. ReturnInvoice: The document is a permanent sales return invoice; document and tax calculation results are saved in the tax history GetTaxResult will return with a DocStatus of Saved.

        :return: The doc_type of this GetTaxRequest.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """
        Sets the doc_type of this GetTaxRequest.
        The document type specifies the category of the document and affects how the document is treated after a tax calculation. If no DocType is specified in the request, SalesOrder will be used. SalesOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. SalesInvoice: The document is a permanent invoice; document and tax calculation results are saved in the tax history. GetTaxResult will return with a DocStatus of Saved. PurchaseOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. PurchaseInvoice : The document is a permanent invoice; document and tax calculation results are saved in the tax history. GetTaxResult will return with a DocStatus of Saved. ReturnOrder: This is a temporary document type and is not saved in tax history. GetTaxResult will return with a DocStatus of Temporary. ReturnInvoice: The document is a permanent sales return invoice; document and tax calculation results are saved in the tax history GetTaxResult will return with a DocStatus of Saved.

        :param doc_type: The doc_type of this GetTaxRequest.
        :type: str
        """

        self._doc_type = doc_type

    @property
    def doc_date(self):
        """
        Gets the doc_date of this GetTaxRequest.
        The date on the invoice, purchase order, etc. Format YYYY-MM-DD. If omitted, this will default to the current date.

        :return: The doc_date of this GetTaxRequest.
        :rtype: date
        """
        return self._doc_date

    @doc_date.setter
    def doc_date(self, doc_date):
        """
        Sets the doc_date of this GetTaxRequest.
        The date on the invoice, purchase order, etc. Format YYYY-MM-DD. If omitted, this will default to the current date.

        :param doc_date: The doc_date of this GetTaxRequest.
        :type: date
        """

        self._doc_date = doc_date

    @property
    def exemption_no(self):
        """
        Gets the exemption_no of this GetTaxRequest.
        Any string value will cause the sale to be exempt. This should only be used if your finance team is manually verifying and tracking exemption certificates.

        :return: The exemption_no of this GetTaxRequest.
        :rtype: str
        """
        return self._exemption_no

    @exemption_no.setter
    def exemption_no(self, exemption_no):
        """
        Sets the exemption_no of this GetTaxRequest.
        Any string value will cause the sale to be exempt. This should only be used if your finance team is manually verifying and tracking exemption certificates.

        :param exemption_no: The exemption_no of this GetTaxRequest.
        :type: str
        """
        if exemption_no is not None and len(exemption_no) > 25:
            raise ValueError("Invalid value for `exemption_no`, length must be less than or equal to `25`")

        self._exemption_no = exemption_no

    @property
    def location_code(self):
        """
        Gets the location_code of this GetTaxRequest.
        Also referred to as a Store Location, Outlet Id, or Outlet code. Location code is a value assigned by some state jurisdictions that identifies a particular store location. These states may require tax liabilities to be broken out separately for each store location.

        :return: The location_code of this GetTaxRequest.
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """
        Sets the location_code of this GetTaxRequest.
        Also referred to as a Store Location, Outlet Id, or Outlet code. Location code is a value assigned by some state jurisdictions that identifies a particular store location. These states may require tax liabilities to be broken out separately for each store location.

        :param location_code: The location_code of this GetTaxRequest.
        :type: str
        """
        if location_code is not None and len(location_code) > 25:
            raise ValueError("Invalid value for `location_code`, length must be less than or equal to `25`")

        self._location_code = location_code

    @property
    def pos_lane_code(self):
        """
        Gets the pos_lane_code of this GetTaxRequest.
        Permits a point of sale application to record the unique code / ID / number associated with the terminal processing a sale.

        :return: The pos_lane_code of this GetTaxRequest.
        :rtype: str
        """
        return self._pos_lane_code

    @pos_lane_code.setter
    def pos_lane_code(self, pos_lane_code):
        """
        Sets the pos_lane_code of this GetTaxRequest.
        Permits a point of sale application to record the unique code / ID / number associated with the terminal processing a sale.

        :param pos_lane_code: The pos_lane_code of this GetTaxRequest.
        :type: str
        """
        if pos_lane_code is not None and len(pos_lane_code) > 50:
            raise ValueError("Invalid value for `pos_lane_code`, length must be less than or equal to `50`")

        self._pos_lane_code = pos_lane_code

    @property
    def purchase_order_no(self):
        """
        Gets the purchase_order_no of this GetTaxRequest.
        Your customer’s purchase order number.

        :return: The purchase_order_no of this GetTaxRequest.
        :rtype: str
        """
        return self._purchase_order_no

    @purchase_order_no.setter
    def purchase_order_no(self, purchase_order_no):
        """
        Sets the purchase_order_no of this GetTaxRequest.
        Your customer’s purchase order number.

        :param purchase_order_no: The purchase_order_no of this GetTaxRequest.
        :type: str
        """
        if purchase_order_no is not None and len(purchase_order_no) > 50:
            raise ValueError("Invalid value for `purchase_order_no`, length must be less than or equal to `50`")

        self._purchase_order_no = purchase_order_no

    @property
    def reference_code(self):
        """
        Gets the reference_code of this GetTaxRequest.
        Additional information used for reporting. For returns, this can refer to the DocCode of the original invoice.

        :return: The reference_code of this GetTaxRequest.
        :rtype: str
        """
        return self._reference_code

    @reference_code.setter
    def reference_code(self, reference_code):
        """
        Sets the reference_code of this GetTaxRequest.
        Additional information used for reporting. For returns, this can refer to the DocCode of the original invoice.

        :param reference_code: The reference_code of this GetTaxRequest.
        :type: str
        """
        if reference_code is not None and len(reference_code) > 50:
            raise ValueError("Invalid value for `reference_code`, length must be less than or equal to `50`")

        self._reference_code = reference_code

    @property
    def tax_override(self):
        """
        Gets the tax_override of this GetTaxRequest.

        :return: The tax_override of this GetTaxRequest.
        :rtype: TaxOverride
        """
        return self._tax_override

    @tax_override.setter
    def tax_override(self, tax_override):
        """
        Sets the tax_override of this GetTaxRequest.

        :param tax_override: The tax_override of this GetTaxRequest.
        :type: TaxOverride
        """

        self._tax_override = tax_override

    @property
    def addresses(self):
        """
        Gets the addresses of this GetTaxRequest.
        

        :return: The addresses of this GetTaxRequest.
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """
        Sets the addresses of this GetTaxRequest.
        

        :param addresses: The addresses of this GetTaxRequest.
        :type: list[Address]
        """
        if addresses is None:
            raise ValueError("Invalid value for `addresses`, must not be `None`")

        self._addresses = addresses

    @property
    def lines(self):
        """
        Gets the lines of this GetTaxRequest.
        Document line array. There is a limit of 15000 lines per document.

        :return: The lines of this GetTaxRequest.
        :rtype: list[Line]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """
        Sets the lines of this GetTaxRequest.
        Document line array. There is a limit of 15000 lines per document.

        :param lines: The lines of this GetTaxRequest.
        :type: list[Line]
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")

        self._lines = lines

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTaxRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
