# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTaxResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, doc_code=None, doc_date=None, time_stamp=None, total_amount=None, total_discount=None, total_exemption=None, total_taxable=None, total_tax=None, total_tax_calculated=None, tax_date=None, tax_lines=None, tax_summary=None, tax_addresses=None, result_code=None):
        """
        GetTaxResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'doc_code': 'DocCode',
            'doc_date': 'str',
            'time_stamp': 'datetime',
            'total_amount': 'float',
            'total_discount': 'float',
            'total_exemption': 'float',
            'total_taxable': 'float',
            'total_tax': 'float',
            'total_tax_calculated': 'float',
            'tax_date': 'date',
            'tax_lines': 'list[TaxLine]',
            'tax_summary': 'list[TaxDetail]',
            'tax_addresses': 'list[TaxAddress]',
            'result_code': 'ResultCode'
        }

        self.attribute_map = {
            'doc_code': 'DocCode',
            'doc_date': 'DocDate',
            'time_stamp': 'TimeStamp',
            'total_amount': 'TotalAmount',
            'total_discount': 'TotalDiscount',
            'total_exemption': 'TotalExemption',
            'total_taxable': 'TotalTaxable',
            'total_tax': 'TotalTax',
            'total_tax_calculated': 'TotalTaxCalculated',
            'tax_date': 'TaxDate',
            'tax_lines': 'TaxLines',
            'tax_summary': 'TaxSummary',
            'tax_addresses': 'TaxAddresses',
            'result_code': 'ResultCode'
        }

        self._doc_code = doc_code
        self._doc_date = doc_date
        self._time_stamp = time_stamp
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_exemption = total_exemption
        self._total_taxable = total_taxable
        self._total_tax = total_tax
        self._total_tax_calculated = total_tax_calculated
        self._tax_date = tax_date
        self._tax_lines = tax_lines
        self._tax_summary = tax_summary
        self._tax_addresses = tax_addresses
        self._result_code = result_code

    @property
    def doc_code(self):
        """
        Gets the doc_code of this GetTaxResult.

        :return: The doc_code of this GetTaxResult.
        :rtype: DocCode
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """
        Sets the doc_code of this GetTaxResult.

        :param doc_code: The doc_code of this GetTaxResult.
        :type: DocCode
        """

        self._doc_code = doc_code

    @property
    def doc_date(self):
        """
        Gets the doc_date of this GetTaxResult.
        Date of invoice, sales order, purchase order, etc.

        :return: The doc_date of this GetTaxResult.
        :rtype: str
        """
        return self._doc_date

    @doc_date.setter
    def doc_date(self, doc_date):
        """
        Sets the doc_date of this GetTaxResult.
        Date of invoice, sales order, purchase order, etc.

        :param doc_date: The doc_date of this GetTaxResult.
        :type: str
        """

        self._doc_date = doc_date

    @property
    def time_stamp(self):
        """
        Gets the time_stamp of this GetTaxResult.
        Server timestamp of request.

        :return: The time_stamp of this GetTaxResult.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """
        Sets the time_stamp of this GetTaxResult.
        Server timestamp of request.

        :param time_stamp: The time_stamp of this GetTaxResult.
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def total_amount(self):
        """
        Gets the total_amount of this GetTaxResult.
        Sum of all line `Amount` values.

        :return: The total_amount of this GetTaxResult.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this GetTaxResult.
        Sum of all line `Amount` values.

        :param total_amount: The total_amount of this GetTaxResult.
        :type: float
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """
        Gets the total_discount of this GetTaxResult.
        Sum of all `TaxLine` discount amounts.

        :return: The total_discount of this GetTaxResult.
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """
        Sets the total_discount of this GetTaxResult.
        Sum of all `TaxLine` discount amounts.

        :param total_discount: The total_discount of this GetTaxResult.
        :type: float
        """

        self._total_discount = total_discount

    @property
    def total_exemption(self):
        """
        Gets the total_exemption of this GetTaxResult.
        Total exemption amount.

        :return: The total_exemption of this GetTaxResult.
        :rtype: float
        """
        return self._total_exemption

    @total_exemption.setter
    def total_exemption(self, total_exemption):
        """
        Sets the total_exemption of this GetTaxResult.
        Total exemption amount.

        :param total_exemption: The total_exemption of this GetTaxResult.
        :type: float
        """

        self._total_exemption = total_exemption

    @property
    def total_taxable(self):
        """
        Gets the total_taxable of this GetTaxResult.
        Total taxable amount.

        :return: The total_taxable of this GetTaxResult.
        :rtype: float
        """
        return self._total_taxable

    @total_taxable.setter
    def total_taxable(self, total_taxable):
        """
        Sets the total_taxable of this GetTaxResult.
        Total taxable amount.

        :param total_taxable: The total_taxable of this GetTaxResult.
        :type: float
        """

        self._total_taxable = total_taxable

    @property
    def total_tax(self):
        """
        Gets the total_tax of this GetTaxResult.
        Sum of all `TaxLine` tax amounts.

        :return: The total_tax of this GetTaxResult.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """
        Sets the total_tax of this GetTaxResult.
        Sum of all `TaxLine` tax amounts.

        :param total_tax: The total_tax of this GetTaxResult.
        :type: float
        """

        self._total_tax = total_tax

    @property
    def total_tax_calculated(self):
        """
        Gets the total_tax_calculated of this GetTaxResult.
        Indicates the total tax calculated by AvaTax. This is usually the same as the `TotalTax`, except when a tax override amount is specified. This is for informational purposes. The `TotalTax` will still be used for reporting.

        :return: The total_tax_calculated of this GetTaxResult.
        :rtype: float
        """
        return self._total_tax_calculated

    @total_tax_calculated.setter
    def total_tax_calculated(self, total_tax_calculated):
        """
        Sets the total_tax_calculated of this GetTaxResult.
        Indicates the total tax calculated by AvaTax. This is usually the same as the `TotalTax`, except when a tax override amount is specified. This is for informational purposes. The `TotalTax` will still be used for reporting.

        :param total_tax_calculated: The total_tax_calculated of this GetTaxResult.
        :type: float
        """

        self._total_tax_calculated = total_tax_calculated

    @property
    def tax_date(self):
        """
        Gets the tax_date of this GetTaxResult.
        Date used to assess tax rates and jurisdictions.

        :return: The tax_date of this GetTaxResult.
        :rtype: date
        """
        return self._tax_date

    @tax_date.setter
    def tax_date(self, tax_date):
        """
        Sets the tax_date of this GetTaxResult.
        Date used to assess tax rates and jurisdictions.

        :param tax_date: The tax_date of this GetTaxResult.
        :type: date
        """

        self._tax_date = tax_date

    @property
    def tax_lines(self):
        """
        Gets the tax_lines of this GetTaxResult.

        :return: The tax_lines of this GetTaxResult.
        :rtype: list[TaxLine]
        """
        return self._tax_lines

    @tax_lines.setter
    def tax_lines(self, tax_lines):
        """
        Sets the tax_lines of this GetTaxResult.

        :param tax_lines: The tax_lines of this GetTaxResult.
        :type: list[TaxLine]
        """

        self._tax_lines = tax_lines

    @property
    def tax_summary(self):
        """
        Gets the tax_summary of this GetTaxResult.

        :return: The tax_summary of this GetTaxResult.
        :rtype: list[TaxDetail]
        """
        return self._tax_summary

    @tax_summary.setter
    def tax_summary(self, tax_summary):
        """
        Sets the tax_summary of this GetTaxResult.

        :param tax_summary: The tax_summary of this GetTaxResult.
        :type: list[TaxDetail]
        """

        self._tax_summary = tax_summary

    @property
    def tax_addresses(self):
        """
        Gets the tax_addresses of this GetTaxResult.

        :return: The tax_addresses of this GetTaxResult.
        :rtype: list[TaxAddress]
        """
        return self._tax_addresses

    @tax_addresses.setter
    def tax_addresses(self, tax_addresses):
        """
        Sets the tax_addresses of this GetTaxResult.

        :param tax_addresses: The tax_addresses of this GetTaxResult.
        :type: list[TaxAddress]
        """

        self._tax_addresses = tax_addresses

    @property
    def result_code(self):
        """
        Gets the result_code of this GetTaxResult.

        :return: The result_code of this GetTaxResult.
        :rtype: ResultCode
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """
        Sets the result_code of this GetTaxResult.

        :param result_code: The result_code of this GetTaxResult.
        :type: ResultCode
        """

        self._result_code = result_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTaxResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
