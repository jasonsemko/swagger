# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Line(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_no=None, destination_code=None, origin_code=None, item_code=None, tax_code=None, customer_usage_type=None, business_identification_no=None, description=None, qty=None, amount=None, discounted=None, tax_included=None, ref1=None, ref2=None, tax_override=None):
        """
        Line - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_no': 'str',
            'destination_code': 'str',
            'origin_code': 'str',
            'item_code': 'str',
            'tax_code': 'str',
            'customer_usage_type': 'str',
            'business_identification_no': 'str',
            'description': 'str',
            'qty': 'float',
            'amount': 'float',
            'discounted': 'bool',
            'tax_included': 'bool',
            'ref1': 'str',
            'ref2': 'str',
            'tax_override': 'TaxOverride'
        }

        self.attribute_map = {
            'line_no': 'LineNo',
            'destination_code': 'DestinationCode',
            'origin_code': 'OriginCode',
            'item_code': 'ItemCode',
            'tax_code': 'TaxCode',
            'customer_usage_type': 'CustomerUsageType',
            'business_identification_no': 'BusinessIdentificationNo',
            'description': 'Description',
            'qty': 'Qty',
            'amount': 'Amount',
            'discounted': 'Discounted',
            'tax_included': 'TaxIncluded',
            'ref1': 'Ref1',
            'ref2': 'Ref2',
            'tax_override': 'TaxOverride'
        }

        self._line_no = line_no
        self._destination_code = destination_code
        self._origin_code = origin_code
        self._item_code = item_code
        self._tax_code = tax_code
        self._customer_usage_type = customer_usage_type
        self._business_identification_no = business_identification_no
        self._description = description
        self._qty = qty
        self._amount = amount
        self._discounted = discounted
        self._tax_included = tax_included
        self._ref1 = ref1
        self._ref2 = ref2
        self._tax_override = tax_override

    @property
    def line_no(self):
        """
        Gets the line_no of this Line.
        Line item identifier. LineId uniquely identifies the line item row.

        :return: The line_no of this Line.
        :rtype: str
        """
        return self._line_no

    @line_no.setter
    def line_no(self, line_no):
        """
        Sets the line_no of this Line.
        Line item identifier. LineId uniquely identifies the line item row.

        :param line_no: The line_no of this Line.
        :type: str
        """
        if line_no is None:
            raise ValueError("Invalid value for `line_no`, must not be `None`")
        if line_no is not None and len(line_no) > 50:
            raise ValueError("Invalid value for `line_no`, length must be less than or equal to `50`")

        self._line_no = line_no

    @property
    def destination_code(self):
        """
        Gets the destination_code of this Line.
        Destination (ship-to) address code. `DestinationCode` references an address from the `Addresses` collection.

        :return: The destination_code of this Line.
        :rtype: str
        """
        return self._destination_code

    @destination_code.setter
    def destination_code(self, destination_code):
        """
        Sets the destination_code of this Line.
        Destination (ship-to) address code. `DestinationCode` references an address from the `Addresses` collection.

        :param destination_code: The destination_code of this Line.
        :type: str
        """
        if destination_code is None:
            raise ValueError("Invalid value for `destination_code`, must not be `None`")

        self._destination_code = destination_code

    @property
    def origin_code(self):
        """
        Gets the origin_code of this Line.
        Origination (ship-from) address code. `OriginCode` references an address from the `Addresses` collection.

        :return: The origin_code of this Line.
        :rtype: str
        """
        return self._origin_code

    @origin_code.setter
    def origin_code(self, origin_code):
        """
        Sets the origin_code of this Line.
        Origination (ship-from) address code. `OriginCode` references an address from the `Addresses` collection.

        :param origin_code: The origin_code of this Line.
        :type: str
        """
        if origin_code is None:
            raise ValueError("Invalid value for `origin_code`, must not be `None`")

        self._origin_code = origin_code

    @property
    def item_code(self):
        """
        Gets the item_code of this Line.
        Your item identifier, SKU, or UPC. Strongly recommended.

        :return: The item_code of this Line.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code):
        """
        Sets the item_code of this Line.
        Your item identifier, SKU, or UPC. Strongly recommended.

        :param item_code: The item_code of this Line.
        :type: str
        """
        if item_code is not None and len(item_code) > 50:
            raise ValueError("Invalid value for `item_code`, length must be less than or equal to `50`")

        self._item_code = item_code

    @property
    def tax_code(self):
        """
        Gets the tax_code of this Line.
        Product taxability code of the line item. Can be an AvaTax system tax code, or a custom-defined tax code.

        :return: The tax_code of this Line.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """
        Sets the tax_code of this Line.
        Product taxability code of the line item. Can be an AvaTax system tax code, or a custom-defined tax code.

        :param tax_code: The tax_code of this Line.
        :type: str
        """
        if tax_code is not None and len(tax_code) > 25:
            raise ValueError("Invalid value for `tax_code`, length must be less than or equal to `25`")

        self._tax_code = tax_code

    @property
    def customer_usage_type(self):
        """
        Gets the customer_usage_type of this Line.
        The client application customer or usage type. `CustomerUsageType` determines the exempt status of the transaction based on the exemption tax rules for the jurisdictions involved. Can also be referred to as Entity/Use Code. More information about this value is available in the Avalara Help Center.

        :return: The customer_usage_type of this Line.
        :rtype: str
        """
        return self._customer_usage_type

    @customer_usage_type.setter
    def customer_usage_type(self, customer_usage_type):
        """
        Sets the customer_usage_type of this Line.
        The client application customer or usage type. `CustomerUsageType` determines the exempt status of the transaction based on the exemption tax rules for the jurisdictions involved. Can also be referred to as Entity/Use Code. More information about this value is available in the Avalara Help Center.

        :param customer_usage_type: The customer_usage_type of this Line.
        :type: str
        """
        if customer_usage_type is not None and len(customer_usage_type) > 25:
            raise ValueError("Invalid value for `customer_usage_type`, length must be less than or equal to `25`")

        self._customer_usage_type = customer_usage_type

    @property
    def business_identification_no(self):
        """
        Gets the business_identification_no of this Line.
        The buyer’s VAT id. Using this value will force VAT rules to be considered for the transaction. This may be set on the document or the line.

        :return: The business_identification_no of this Line.
        :rtype: str
        """
        return self._business_identification_no

    @business_identification_no.setter
    def business_identification_no(self, business_identification_no):
        """
        Sets the business_identification_no of this Line.
        The buyer’s VAT id. Using this value will force VAT rules to be considered for the transaction. This may be set on the document or the line.

        :param business_identification_no: The business_identification_no of this Line.
        :type: str
        """
        if business_identification_no is not None and len(business_identification_no) > 25:
            raise ValueError("Invalid value for `business_identification_no`, length must be less than or equal to `25`")

        self._business_identification_no = business_identification_no

    @property
    def description(self):
        """
        Gets the description of this Line.
        Item description. Required for customers using our filing service.

        :return: The description of this Line.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Line.
        Item description. Required for customers using our filing service.

        :param description: The description of this Line.
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def qty(self):
        """
        Gets the qty of this Line.
        Item quantity. The tax engine does NOT use this as a multiplier with price to get the `Amount`.

        :return: The qty of this Line.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this Line.
        Item quantity. The tax engine does NOT use this as a multiplier with price to get the `Amount`.

        :param qty: The qty of this Line.
        :type: float
        """

        self._qty = qty

    @property
    def amount(self):
        """
        Gets the amount of this Line.
        Total amount of item (extended amount, qty * unit price). If omitted, this value will default to `0`

        :return: The amount of this Line.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Line.
        Total amount of item (extended amount, qty * unit price). If omitted, this value will default to `0`

        :param amount: The amount of this Line.
        :type: float
        """

        self._amount = amount

    @property
    def discounted(self):
        """
        Gets the discounted of this Line.
        Should be set to true if the document level discount is applied to this line item. Defaults to `false`.

        :return: The discounted of this Line.
        :rtype: bool
        """
        return self._discounted

    @discounted.setter
    def discounted(self, discounted):
        """
        Sets the discounted of this Line.
        Should be set to true if the document level discount is applied to this line item. Defaults to `false`.

        :param discounted: The discounted of this Line.
        :type: bool
        """

        self._discounted = discounted

    @property
    def tax_included(self):
        """
        Gets the tax_included of this Line.
        Should be set to `true` if the tax is already included, and sale amount and tax should be back-calculated from the provided `Line.Amount`. Defaults to `false`.

        :return: The tax_included of this Line.
        :rtype: bool
        """
        return self._tax_included

    @tax_included.setter
    def tax_included(self, tax_included):
        """
        Sets the tax_included of this Line.
        Should be set to `true` if the tax is already included, and sale amount and tax should be back-calculated from the provided `Line.Amount`. Defaults to `false`.

        :param tax_included: The tax_included of this Line.
        :type: bool
        """

        self._tax_included = tax_included

    @property
    def ref1(self):
        """
        Gets the ref1 of this Line.
        Value stored on a line item. Does not affect tax calclulation.

        :return: The ref1 of this Line.
        :rtype: str
        """
        return self._ref1

    @ref1.setter
    def ref1(self, ref1):
        """
        Sets the ref1 of this Line.
        Value stored on a line item. Does not affect tax calclulation.

        :param ref1: The ref1 of this Line.
        :type: str
        """
        if ref1 is not None and len(ref1) > 250:
            raise ValueError("Invalid value for `ref1`, length must be less than or equal to `250`")

        self._ref1 = ref1

    @property
    def ref2(self):
        """
        Gets the ref2 of this Line.
        Value stored on a line item. Does not affect tax calclulation.

        :return: The ref2 of this Line.
        :rtype: str
        """
        return self._ref2

    @ref2.setter
    def ref2(self, ref2):
        """
        Sets the ref2 of this Line.
        Value stored on a line item. Does not affect tax calclulation.

        :param ref2: The ref2 of this Line.
        :type: str
        """
        if ref2 is not None and len(ref2) > 250:
            raise ValueError("Invalid value for `ref2`, length must be less than or equal to `250`")

        self._ref2 = ref2

    @property
    def tax_override(self):
        """
        Gets the tax_override of this Line.

        :return: The tax_override of this Line.
        :rtype: TaxOverride
        """
        return self._tax_override

    @tax_override.setter
    def tax_override(self, tax_override):
        """
        Sets the tax_override of this Line.

        :param tax_override: The tax_override of this Line.
        :type: TaxOverride
        """

        self._tax_override = tax_override

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Line):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
