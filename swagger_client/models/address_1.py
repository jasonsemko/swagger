# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Address1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line1=None, line2=None, line3=None, city=None, region=None, country=None, postal_code=None, address_type=None, fips_code=None, carrier_route=None, post_net=None):
        """
        Address1 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line1': 'str',
            'line2': 'str',
            'line3': 'str',
            'city': 'str',
            'region': 'str',
            'country': 'str',
            'postal_code': 'str',
            'address_type': 'str',
            'fips_code': 'str',
            'carrier_route': 'str',
            'post_net': 'str'
        }

        self.attribute_map = {
            'line1': 'Line1',
            'line2': 'Line2',
            'line3': 'Line3',
            'city': 'City',
            'region': 'Region',
            'country': 'Country',
            'postal_code': 'PostalCode',
            'address_type': 'AddressType',
            'fips_code': 'FipsCode',
            'carrier_route': 'CarrierRoute',
            'post_net': 'PostNet'
        }

        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._city = city
        self._region = region
        self._country = country
        self._postal_code = postal_code
        self._address_type = address_type
        self._fips_code = fips_code
        self._carrier_route = carrier_route
        self._post_net = post_net

    @property
    def line1(self):
        """
        Gets the line1 of this Address1.
        Address line 1

        :return: The line1 of this Address1.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """
        Sets the line1 of this Address1.
        Address line 1

        :param line1: The line1 of this Address1.
        :type: str
        """
        if line1 is not None and len(line1) > 50:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `50`")

        self._line1 = line1

    @property
    def line2(self):
        """
        Gets the line2 of this Address1.
        Address line 2

        :return: The line2 of this Address1.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """
        Sets the line2 of this Address1.
        Address line 2

        :param line2: The line2 of this Address1.
        :type: str
        """
        if line2 is not None and len(line2) > 50:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `50`")

        self._line2 = line2

    @property
    def line3(self):
        """
        Gets the line3 of this Address1.
        Address line 3

        :return: The line3 of this Address1.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """
        Sets the line3 of this Address1.
        Address line 3

        :param line3: The line3 of this Address1.
        :type: str
        """
        if line3 is not None and len(line3) > 50:
            raise ValueError("Invalid value for `line3`, length must be less than or equal to `50`")

        self._line3 = line3

    @property
    def city(self):
        """
        Gets the city of this Address1.
        City name

        :return: The city of this Address1.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address1.
        City name

        :param city: The city of this Address1.
        :type: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def region(self):
        """
        Gets the region of this Address1.
        State, province, or region name.

        :return: The region of this Address1.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Address1.
        State, province, or region name.

        :param region: The region of this Address1.
        :type: str
        """
        if region is not None and len(region) > 3:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `3`")

        self._region = region

    @property
    def country(self):
        """
        Gets the country of this Address1.
        Country code.

        :return: The country of this Address1.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Address1.
        Country code.

        :param country: The country of this Address1.
        :type: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Address1.
        Postal or ZIP code

        :return: The postal_code of this Address1.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Address1.
        Postal or ZIP code

        :param postal_code: The postal_code of this Address1.
        :type: str
        """
        if postal_code is not None and len(postal_code) > 11:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `11`")

        self._postal_code = postal_code

    @property
    def address_type(self):
        """
        Gets the address_type of this Address1.
        Address type code. One of: * F - Firm or company address * G - General Delivery address * H - High-rise or business complex * P - PO Box address * R - Rural route address * S - Street or residential address

        :return: The address_type of this Address1.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """
        Sets the address_type of this Address1.
        Address type code. One of: * F - Firm or company address * G - General Delivery address * H - High-rise or business complex * P - PO Box address * R - Rural route address * S - Street or residential address

        :param address_type: The address_type of this Address1.
        :type: str
        """
        if address_type is not None and len(address_type) > 1:
            raise ValueError("Invalid value for `address_type`, length must be less than or equal to `1`")

        self._address_type = address_type

    @property
    def fips_code(self):
        """
        Gets the fips_code of this Address1.
        FIPSCode is a unique 10-digit code representing each geographic combination of state, county, and city. The code is made up of the Federal Information Processing Code (FIPS) that uniquely identifies each state, county, and city in the U.S. Returned for US addresses only. Digits represent jurisdiction codes: * 1-2 State code * 3-5 County code * 6-10 City code

        :return: The fips_code of this Address1.
        :rtype: str
        """
        return self._fips_code

    @fips_code.setter
    def fips_code(self, fips_code):
        """
        Sets the fips_code of this Address1.
        FIPSCode is a unique 10-digit code representing each geographic combination of state, county, and city. The code is made up of the Federal Information Processing Code (FIPS) that uniquely identifies each state, county, and city in the U.S. Returned for US addresses only. Digits represent jurisdiction codes: * 1-2 State code * 3-5 County code * 6-10 City code

        :param fips_code: The fips_code of this Address1.
        :type: str
        """
        if fips_code is not None and len(fips_code) > 10:
            raise ValueError("Invalid value for `fips_code`, length must be less than or equal to `10`")

        self._fips_code = fips_code

    @property
    def carrier_route(self):
        """
        Gets the carrier_route of this Address1.
        CarrierRoute is a four-character string representing a US postal carrier route. The first character of this property, the term, is always alphabetic, and the last three numeric. For example, “R001” or “C027” would be typical carrier routes. The alphabetic letter indicates the type of delivery associated with this address. Returned for US addresses only. * B - PO Box * C - City delivery * G - General delivery * H - Highway contract * R - Rural route

        :return: The carrier_route of this Address1.
        :rtype: str
        """
        return self._carrier_route

    @carrier_route.setter
    def carrier_route(self, carrier_route):
        """
        Sets the carrier_route of this Address1.
        CarrierRoute is a four-character string representing a US postal carrier route. The first character of this property, the term, is always alphabetic, and the last three numeric. For example, “R001” or “C027” would be typical carrier routes. The alphabetic letter indicates the type of delivery associated with this address. Returned for US addresses only. * B - PO Box * C - City delivery * G - General delivery * H - Highway contract * R - Rural route

        :param carrier_route: The carrier_route of this Address1.
        :type: str
        """
        if carrier_route is not None and len(carrier_route) > 4:
            raise ValueError("Invalid value for `carrier_route`, length must be less than or equal to `4`")

        self._carrier_route = carrier_route

    @property
    def post_net(self):
        """
        Gets the post_net of this Address1.
        POSTNet is a 12-digit barcode containing the ZIP Code, ZIP+4 Code, and the delivery point code, used by the USPS to direct mail. Returned for US addresses only digits represent delivery information: * 1-5 ZIP code * 6-9 Plus4 code * 10-11 Delivery point * 12 Check digit

        :return: The post_net of this Address1.
        :rtype: str
        """
        return self._post_net

    @post_net.setter
    def post_net(self, post_net):
        """
        Sets the post_net of this Address1.
        POSTNet is a 12-digit barcode containing the ZIP Code, ZIP+4 Code, and the delivery point code, used by the USPS to direct mail. Returned for US addresses only digits represent delivery information: * 1-5 ZIP code * 6-9 Plus4 code * 10-11 Delivery point * 12 Check digit

        :param post_net: The post_net of this Address1.
        :type: str
        """
        if post_net is not None and len(post_net) > 12:
            raise ValueError("Invalid value for `post_net`, length must be less than or equal to `12`")

        self._post_net = post_net

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Address1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
