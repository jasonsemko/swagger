# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxLine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_no=None, tax_code=None, taxability=None, taxable=None, rate=None, tax=None, discount=None, tax_calculated=None, exemption=None, boundary_level=None, tax_details=None):
        """
        TaxLine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_no': 'str',
            'tax_code': 'str',
            'taxability': 'bool',
            'taxable': 'float',
            'rate': 'float',
            'tax': 'float',
            'discount': 'float',
            'tax_calculated': 'float',
            'exemption': 'float',
            'boundary_level': 'str',
            'tax_details': 'list[TaxDetail]'
        }

        self.attribute_map = {
            'line_no': 'LineNo',
            'tax_code': 'TaxCode',
            'taxability': 'Taxability',
            'taxable': 'Taxable',
            'rate': 'Rate',
            'tax': 'Tax',
            'discount': 'Discount',
            'tax_calculated': 'TaxCalculated',
            'exemption': 'Exemption',
            'boundary_level': 'BoundaryLevel',
            'tax_details': 'TaxDetails'
        }

        self._line_no = line_no
        self._tax_code = tax_code
        self._taxability = taxability
        self._taxable = taxable
        self._rate = rate
        self._tax = tax
        self._discount = discount
        self._tax_calculated = tax_calculated
        self._exemption = exemption
        self._boundary_level = boundary_level
        self._tax_details = tax_details

    @property
    def line_no(self):
        """
        Gets the line_no of this TaxLine.
        Line item identifier.

        :return: The line_no of this TaxLine.
        :rtype: str
        """
        return self._line_no

    @line_no.setter
    def line_no(self, line_no):
        """
        Sets the line_no of this TaxLine.
        Line item identifier.

        :param line_no: The line_no of this TaxLine.
        :type: str
        """
        if line_no is not None and len(line_no) > 50:
            raise ValueError("Invalid value for `line_no`, length must be less than or equal to `50`")

        self._line_no = line_no

    @property
    def tax_code(self):
        """
        Gets the tax_code of this TaxLine.
        The tax code used in calculating tax.

        :return: The tax_code of this TaxLine.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """
        Sets the tax_code of this TaxLine.
        The tax code used in calculating tax.

        :param tax_code: The tax_code of this TaxLine.
        :type: str
        """
        if tax_code is not None and len(tax_code) > 25:
            raise ValueError("Invalid value for `tax_code`, length must be less than or equal to `25`")

        self._tax_code = tax_code

    @property
    def taxability(self):
        """
        Gets the taxability of this TaxLine.
        Flag indicating item was taxable.

        :return: The taxability of this TaxLine.
        :rtype: bool
        """
        return self._taxability

    @taxability.setter
    def taxability(self, taxability):
        """
        Sets the taxability of this TaxLine.
        Flag indicating item was taxable.

        :param taxability: The taxability of this TaxLine.
        :type: bool
        """

        self._taxability = taxability

    @property
    def taxable(self):
        """
        Gets the taxable of this TaxLine.
        The amount that is taxable.

        :return: The taxable of this TaxLine.
        :rtype: float
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """
        Sets the taxable of this TaxLine.
        The amount that is taxable.

        :param taxable: The taxable of this TaxLine.
        :type: float
        """

        self._taxable = taxable

    @property
    def rate(self):
        """
        Gets the rate of this TaxLine.
        Effective tax rate.

        :return: The rate of this TaxLine.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this TaxLine.
        Effective tax rate.

        :param rate: The rate of this TaxLine.
        :type: float
        """

        self._rate = rate

    @property
    def tax(self):
        """
        Gets the tax of this TaxLine.
        Tax amount.

        :return: The tax of this TaxLine.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this TaxLine.
        Tax amount.

        :param tax: The tax of this TaxLine.
        :type: float
        """

        self._tax = tax

    @property
    def discount(self):
        """
        Gets the discount of this TaxLine.
        Discount amount.

        :return: The discount of this TaxLine.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this TaxLine.
        Discount amount.

        :param discount: The discount of this TaxLine.
        :type: float
        """

        self._discount = discount

    @property
    def tax_calculated(self):
        """
        Gets the tax_calculated of this TaxLine.
        Amount of tax calculated.

        :return: The tax_calculated of this TaxLine.
        :rtype: float
        """
        return self._tax_calculated

    @tax_calculated.setter
    def tax_calculated(self, tax_calculated):
        """
        Sets the tax_calculated of this TaxLine.
        Amount of tax calculated.

        :param tax_calculated: The tax_calculated of this TaxLine.
        :type: float
        """

        self._tax_calculated = tax_calculated

    @property
    def exemption(self):
        """
        Gets the exemption of this TaxLine.
        Exempt amount.

        :return: The exemption of this TaxLine.
        :rtype: float
        """
        return self._exemption

    @exemption.setter
    def exemption(self, exemption):
        """
        Sets the exemption of this TaxLine.
        Exempt amount.

        :param exemption: The exemption of this TaxLine.
        :type: float
        """

        self._exemption = exemption

    @property
    def boundary_level(self):
        """
        Gets the boundary_level of this TaxLine.
        The boundary level used to calculate tax: determined by the quality of provided addresses.

        :return: The boundary_level of this TaxLine.
        :rtype: str
        """
        return self._boundary_level

    @boundary_level.setter
    def boundary_level(self, boundary_level):
        """
        Sets the boundary_level of this TaxLine.
        The boundary level used to calculate tax: determined by the quality of provided addresses.

        :param boundary_level: The boundary_level of this TaxLine.
        :type: str
        """
        if boundary_level is not None and len(boundary_level) > 7:
            raise ValueError("Invalid value for `boundary_level`, length must be less than or equal to `7`")

        self._boundary_level = boundary_level

    @property
    def tax_details(self):
        """
        Gets the tax_details of this TaxLine.

        :return: The tax_details of this TaxLine.
        :rtype: list[TaxDetail]
        """
        return self._tax_details

    @tax_details.setter
    def tax_details(self, tax_details):
        """
        Sets the tax_details of this TaxLine.

        :param tax_details: The tax_details of this TaxLine.
        :type: list[TaxDetail]
        """

        self._tax_details = tax_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
