# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, address_code=None, city=None, region=None, country=None, postal_code=None, latitude=None, longitude=None, tax_region_id=None, juris_code=None):
        """
        TaxAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'address_code': 'str',
            'city': 'str',
            'region': 'str',
            'country': 'str',
            'postal_code': 'str',
            'latitude': 'float',
            'longitude': 'float',
            'tax_region_id': 'float',
            'juris_code': 'str'
        }

        self.attribute_map = {
            'address': 'Address',
            'address_code': 'AddressCode',
            'city': 'City',
            'region': 'Region',
            'country': 'Country',
            'postal_code': 'PostalCode',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'tax_region_id': 'TaxRegionId',
            'juris_code': 'JurisCode'
        }

        self._address = address
        self._address_code = address_code
        self._city = city
        self._region = region
        self._country = country
        self._postal_code = postal_code
        self._latitude = latitude
        self._longitude = longitude
        self._tax_region_id = tax_region_id
        self._juris_code = juris_code

    @property
    def address(self):
        """
        Gets the address of this TaxAddress.
        Canonical street address

        :return: The address of this TaxAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this TaxAddress.
        Canonical street address

        :param address: The address of this TaxAddress.
        :type: str
        """
        if address is not None and len(address) > 50:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `50`")

        self._address = address

    @property
    def address_code(self):
        """
        Gets the address_code of this TaxAddress.
        Reference code uniquely identifying this address instance. AddressCode will always correspond to an address code supplied to in the address collection provided in the request.

        :return: The address_code of this TaxAddress.
        :rtype: str
        """
        return self._address_code

    @address_code.setter
    def address_code(self, address_code):
        """
        Sets the address_code of this TaxAddress.
        Reference code uniquely identifying this address instance. AddressCode will always correspond to an address code supplied to in the address collection provided in the request.

        :param address_code: The address_code of this TaxAddress.
        :type: str
        """

        self._address_code = address_code

    @property
    def city(self):
        """
        Gets the city of this TaxAddress.
        City name

        :return: The city of this TaxAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this TaxAddress.
        City name

        :param city: The city of this TaxAddress.
        :type: str
        """
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def region(self):
        """
        Gets the region of this TaxAddress.
        State or region name

        :return: The region of this TaxAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this TaxAddress.
        State or region name

        :param region: The region of this TaxAddress.
        :type: str
        """
        if region is not None and len(region) > 3:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `3`")

        self._region = region

    @property
    def country(self):
        """
        Gets the country of this TaxAddress.
        Country code, as ISO 3166-1 (Alpha-2) country code (e.g. \"US\")

        :return: The country of this TaxAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this TaxAddress.
        Country code, as ISO 3166-1 (Alpha-2) country code (e.g. \"US\")

        :param country: The country of this TaxAddress.
        :type: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def postal_code(self):
        """
        Gets the postal_code of this TaxAddress.
        Postal code

        :return: The postal_code of this TaxAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this TaxAddress.
        Postal code

        :param postal_code: The postal_code of this TaxAddress.
        :type: str
        """
        if postal_code is not None and len(postal_code) > 11:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `11`")

        self._postal_code = postal_code

    @property
    def latitude(self):
        """
        Gets the latitude of this TaxAddress.
        Geographic latitude.

        :return: The latitude of this TaxAddress.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this TaxAddress.
        Geographic latitude.

        :param latitude: The latitude of this TaxAddress.
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this TaxAddress.
        Geographic longitude.

        :return: The longitude of this TaxAddress.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this TaxAddress.
        Geographic longitude.

        :param longitude: The longitude of this TaxAddress.
        :type: float
        """

        self._longitude = longitude

    @property
    def tax_region_id(self):
        """
        Gets the tax_region_id of this TaxAddress.
        AvaTax tax region identifier.

        :return: The tax_region_id of this TaxAddress.
        :rtype: float
        """
        return self._tax_region_id

    @tax_region_id.setter
    def tax_region_id(self, tax_region_id):
        """
        Sets the tax_region_id of this TaxAddress.
        AvaTax tax region identifier.

        :param tax_region_id: The tax_region_id of this TaxAddress.
        :type: float
        """

        self._tax_region_id = tax_region_id

    @property
    def juris_code(self):
        """
        Gets the juris_code of this TaxAddress.
        Tax jurisdiction code.

        :return: The juris_code of this TaxAddress.
        :rtype: str
        """
        return self._juris_code

    @juris_code.setter
    def juris_code(self, juris_code):
        """
        Sets the juris_code of this TaxAddress.
        Tax jurisdiction code.

        :param juris_code: The juris_code of this TaxAddress.
        :type: str
        """

        self._juris_code = juris_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
