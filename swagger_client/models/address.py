# coding: utf-8

"""
    AvaTax REST API

    The AvaTax REST API exposes the most commonly used available for interacting with the AvaTax service, allowing calculation of tax, modification of documents, and validation of addresses. If you're unsure of which API to use, a full comparison of the differences between the functionality provided by our REST and SOAP interfaces is documented [here](http://developer.avalara.com/avatax/soap-or-rest/). The [SOAP API reference](http://developer.avalara.com/avatax/api-reference/tax/soap) is also available.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address_code=None, line1=None, line2=None, line3=None, city=None, region=None, country=None, postal_code=None, latitude=None, longitude=None, tax_region_id=None):
        """
        Address - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address_code': 'str',
            'line1': 'str',
            'line2': 'str',
            'line3': 'str',
            'city': 'str',
            'region': 'str',
            'country': 'str',
            'postal_code': 'str',
            'latitude': 'float',
            'longitude': 'float',
            'tax_region_id': 'float'
        }

        self.attribute_map = {
            'address_code': 'AddressCode',
            'line1': 'Line1',
            'line2': 'Line2',
            'line3': 'Line3',
            'city': 'City',
            'region': 'Region',
            'country': 'Country',
            'postal_code': 'PostalCode',
            'latitude': 'Latitude',
            'longitude': 'Longitude',
            'tax_region_id': 'TaxRegionId'
        }

        self._address_code = address_code
        self._line1 = line1
        self._line2 = line2
        self._line3 = line3
        self._city = city
        self._region = region
        self._country = country
        self._postal_code = postal_code
        self._latitude = latitude
        self._longitude = longitude
        self._tax_region_id = tax_region_id

    @property
    def address_code(self):
        """
        Gets the address_code of this Address.
        Reference code uniquely identifying this address instance.

        :return: The address_code of this Address.
        :rtype: str
        """
        return self._address_code

    @address_code.setter
    def address_code(self, address_code):
        """
        Sets the address_code of this Address.
        Reference code uniquely identifying this address instance.

        :param address_code: The address_code of this Address.
        :type: str
        """
        if address_code is None:
            raise ValueError("Invalid value for `address_code`, must not be `None`")

        self._address_code = address_code

    @property
    def line1(self):
        """
        Gets the line1 of this Address.
        Address line 1, recommended if latitude and longitude are not provided.

        :return: The line1 of this Address.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """
        Sets the line1 of this Address.
        Address line 1, recommended if latitude and longitude are not provided.

        :param line1: The line1 of this Address.
        :type: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")
        if line1 is not None and len(line1) > 50:
            raise ValueError("Invalid value for `line1`, length must be less than or equal to `50`")

        self._line1 = line1

    @property
    def line2(self):
        """
        Gets the line2 of this Address.
        Address line 2

        :return: The line2 of this Address.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """
        Sets the line2 of this Address.
        Address line 2

        :param line2: The line2 of this Address.
        :type: str
        """
        if line2 is not None and len(line2) > 50:
            raise ValueError("Invalid value for `line2`, length must be less than or equal to `50`")

        self._line2 = line2

    @property
    def line3(self):
        """
        Gets the line3 of this Address.
        Address line 3

        :return: The line3 of this Address.
        :rtype: str
        """
        return self._line3

    @line3.setter
    def line3(self, line3):
        """
        Sets the line3 of this Address.
        Address line 3

        :param line3: The line3 of this Address.
        :type: str
        """
        if line3 is not None and len(line3) > 50:
            raise ValueError("Invalid value for `line3`, length must be less than or equal to `50`")

        self._line3 = line3

    @property
    def city(self):
        """
        Gets the city of this Address.
        City name, required unless `PostalCode` is specified and/or latitude and longitude are provided.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address.
        City name, required unless `PostalCode` is specified and/or latitude and longitude are provided.

        :param city: The city of this Address.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) > 50:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `50`")

        self._city = city

    @property
    def region(self):
        """
        Gets the region of this Address.
        State, province, or region name. Required unless Ccity is specified and/or latitude and longitude are provided.

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Address.
        State, province, or region name. Required unless Ccity is specified and/or latitude and longitude are provided.

        :param region: The region of this Address.
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")
        if region is not None and len(region) > 3:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `3`")

        self._region = region

    @property
    def country(self):
        """
        Gets the country of this Address.
        Two-character ISO country code. If not provided, will default to 'US'.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Address.
        Two-character ISO country code. If not provided, will default to 'US'.

        :param country: The country of this Address.
        :type: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Address.
        Postal or ZIP code, Required unless city and region are specified, and/or latitude and longitude are provided.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Address.
        Postal or ZIP code, Required unless city and region are specified, and/or latitude and longitude are provided.

        :param postal_code: The postal_code of this Address.
        :type: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) > 11:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `11`")

        self._postal_code = postal_code

    @property
    def latitude(self):
        """
        Gets the latitude of this Address.
        Geographic latitude. If `Latitude` is defined, it is expected that the longitude field will also be provided. Failure to do so will result in operation error. Calculation by latitude/longitude is available for the United States only. If a latitude/longitude value outside of the US is provided, the service will return an error.

        :return: The latitude of this Address.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Address.
        Geographic latitude. If `Latitude` is defined, it is expected that the longitude field will also be provided. Failure to do so will result in operation error. Calculation by latitude/longitude is available for the United States only. If a latitude/longitude value outside of the US is provided, the service will return an error.

        :param latitude: The latitude of this Address.
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Address.
        Geographic longitude. If `Longitude` is defined, it is expected that the latitude field will also be provided. Fail to do so will result in operation error. Calculation by latitude/longitude is available for the United States only. If a latitude/longitude value outside of the US is provided, the service will return an error.

        :return: The longitude of this Address.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Address.
        Geographic longitude. If `Longitude` is defined, it is expected that the latitude field will also be provided. Fail to do so will result in operation error. Calculation by latitude/longitude is available for the United States only. If a latitude/longitude value outside of the US is provided, the service will return an error.

        :param longitude: The longitude of this Address.
        :type: float
        """

        self._longitude = longitude

    @property
    def tax_region_id(self):
        """
        Gets the tax_region_id of this Address.
        AvaTax tax region identifier. If a non-zero value is entered into `TaxRegionId`, other fields will be ignored. Not recommended.

        :return: The tax_region_id of this Address.
        :rtype: float
        """
        return self._tax_region_id

    @tax_region_id.setter
    def tax_region_id(self, tax_region_id):
        """
        Sets the tax_region_id of this Address.
        AvaTax tax region identifier. If a non-zero value is entered into `TaxRegionId`, other fields will be ignored. Not recommended.

        :param tax_region_id: The tax_region_id of this Address.
        :type: float
        """

        self._tax_region_id = tax_region_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
